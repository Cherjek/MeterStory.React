import { Fetch } from '../../../../../core/service';
import { MeterArchTemplate } from './models/meter-arch-template';
import { MeterArchStorage } from './models/meter-arch-storage';
export const deviceType = ['Концентратор электросчетчиков','Электросчетчик','Концентратор импульсных счетчиков'];
export const _storageType = [['',255],['Срезы мгновенных показаний',0],['Срезы информации о окружащей среде',7],['Показания на начало суток',3],['Показания на начало месяца',4],['Потребление за сутки',1],['Потребление за месяц',2],['Профили мощности',5],['Показания на начало часа',6],['Аппаратная конфигурация',8],['Управление питанием',9],['Коррекция времени',10],['Сброс показаний',11],['Инициализация первого массива профилей',12],['Инициализация второго массива профилей',13],['Коррекция тарификатора',14],['Открытие крышки',15],['Неавторизованный доступ',16],['Управление фазой А',17],['Управление фазой В',18],['Управление фазой С',19],['Программирование',20],['Управление реле',21],['Лимит суммарной энергии',22],['Потарифиный лимит энергии',23],['Лимит энергии тарифа 1',24],['Лимит энергии тарифа 2',25],['Лимит энергии тарифа 3',26],['Лимит энергии тарифа 4',27],['Ограничение максимального напряжения фазы А',28],['Ограничение минимального напряжения фазы А',29],['Ограничение максимального напряжения фазы В',30],['Ограничение минимального напряжения фазы В',31],['Ограничение максимального напряжения фазы С',32],['Ограничение минимального напряжения фазы С',33],['Ограничение максимального расхождения напряжения фаз А и В',34],['Ограничение минимального расхождения напряжения фаз А и В',35],['Ограничение максимального расхождения напряжения фаз В и С',36],['Ограничение минимального расхождения напряжения фаз В и С',37],['Ограничение максимального расхождения напряжения фаз С и А',38],['Ограничение минимального расхождения напряжения фаз С и А',39],['Ограничение максимального тока фазы А',40],['Ограничение максимального тока фазы В',41],['Ограничение максимального тока фазы С',42],['Ограничение максимальной частоты сети',43],['Ограничение минимальной частоты сети',44],['Ограничение мощности',45],['Ограничение прямой активной мощности',46],['Ограничение прямой реактивной мощности',47],['Ограничение обратной активной мощности',48],['Ограничение обратной реактивной мощности',49],['Реверс',50]];
export class MeterArchSettingsService extends Fetch {
  constructor() {
    super('/settings/meter/arch');
  }
  get storageType() {
    return _storageType.map(x => ({ id: x[1], name: x[0] }));
  }
  getData = (): Promise<MeterArchTemplate[]> => {
    return super
    .get()
    .then((res) => res.json())
    .then(({ Settings }) => {
      return Settings?.map((arch: MeterArchTemplate) => {
        arch.type = deviceType[(arch.type as number)];
        if (arch.Storages) {
          arch.Storages = arch.Storages.map((as: MeterArchStorage) => {
            as.type = this.storageType.find(x => x.id === as.type)?.name;
            return as;
          });
        }
        return arch;
      });
    })
  }
  saveData(body: MeterArchTemplate[]) {
    return super.save(
      { 
        Settings: body.map((arch: MeterArchTemplate) => {
                      arch = {...arch};
                      arch.type = deviceType.findIndex((v: string) => v === (arch.type as string));
                      arch.type = arch.type === -1 ? 0 : arch.type;
                      if (arch.Storages) {
                        arch.Storages = arch.Storages.map((as: MeterArchStorage) => {
                          as = {...as};
                          as.type = this.storageType.find(x => x.name === as.type)?.id;
                          as.type = as.type == null ? this.storageType[0].id : as.type;
                          return as;
                        })
                        .filter(x => x.type !== 255);
                      }
                      return arch;
                  }) 
    });
  }
  clearData() {
    return super.clear();
  }
}